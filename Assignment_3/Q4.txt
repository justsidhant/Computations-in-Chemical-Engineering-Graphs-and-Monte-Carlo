class Solution {
public:

void dfs(vector<vector<int>> &visited, vector<vector<char>> & grid, int row,int col){

        visited[row][col]=1;
        int delrow[]={-1,1,0,0};
        int delcol[]={0,0,1,-1};
        for(int i=0;i<4;i++){
            int curr_row=row+delrow[i];
            int curr_col=col+delcol[i];
            if(curr_row>=0 && curr_row<grid.size() && curr_col>=0 && curr_col<grid[0].size()){
                if(!visited[curr_row][curr_col] && grid[curr_row][curr_col]=='O'){
                    dfs(visited,grid,curr_row,curr_col);
                }
            }
        }
    }
    void solve(vector<vector<char>>& board) {

        vector<vector<int>> visited(board.size(),vector<int>(board[0].size(),0));


        for(int i=0;i<board.size();i++){
            if(board[i][0]=='O'){
                dfs(visited,board,i,0);
            }
            if(board[i][board[0].size()-1]=='O'){
                dfs(visited,board,i,board[0].size()-1);
            }
        }

        for(int j=1;j<board[0].size()-1;j++){
            if(board[0][j]=='O'){
                dfs(visited,board,0,j);
            }
            if(board[board.size()-1][j]=='O'){
                dfs(visited,board,board.size()-1,j);
            }
        }

        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                if(!visited[i][j]){
                    board[i][j]='X';
                }
            }
        }


    }

    };
