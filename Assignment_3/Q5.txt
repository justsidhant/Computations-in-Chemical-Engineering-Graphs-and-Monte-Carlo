class Solution {

private:

    bool check_bipartite(vector<int> adj[], int src, int color[]) {
        queue<int> q;
        q.push(src);
        color[src] = 1;

        while(!q.empty()) {
            int node = q.front();
            q.pop();

            for(auto adj_node : adj[node]) {
                if(color[adj_node] == -1) {
                    color[adj_node] = 1 - color[node];
                    q.push(adj_node);
                }
                else if(color[adj_node] == color[node]){
                    return false;
                }
            }
        }
        return true;
    }
  
    bool biPartite(vector<int> adj[], int n) {
        int color[n+1];

        memset(color, -1, sizeof(color));

        for(int i=1;i<=n;i++) {
            if(color[i] == -1) {
                if(!check_bipartite(adj, i, color)) {
                    return false;
                }
            }
        }
        return true;
    }
public:
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {

        vector<int> adj[n+1];

        int N = dislikes.size();
        
        for(int i=0;i<N;i++) {
            int u = dislikes[i][0];
            int v = dislikes[i][1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        return biPartite(adj,n);
    }
};